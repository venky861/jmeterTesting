<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Performance and Deals module" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 </stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name"></stringProp>
            <stringProp name="Header.value"></stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="IDENTITY_URL" elementType="Argument">
            <stringProp name="Argument.name">IDENTITY_URL</stringProp>
            <stringProp name="Argument.value">identity-white.dev.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">search-white.dev.pro.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROAPI_IDENTITY_URL" elementType="Argument">
            <stringProp name="Argument.name">PROAPI_IDENTITY_URL</stringProp>
            <stringProp name="Argument.value">white.dev.api.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:/Users/Venkatesh.Sekaran/Desktop/Jmeter/Jmeter/Data_set/Performance_Deals.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">USERNAME,PASSWORD,APIKEY</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="false">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Module" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="USERNAME" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">USERNAME</stringProp>
                </elementProp>
                <elementProp name="PASSWORD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">PASSWORD</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">preqin.com.client</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">preqin.com.default</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Token</stringProp>
              <stringProp name="RegexExtractor.regex">{*access_token&quot;,&quot;([]^&quot;)+}&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor - ApiKey" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="apikey" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${APIKEY}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">apikey</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${PROAPI_IDENTITY_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">BearerToken-Apikey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">refresh_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.refresh_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RefreshToken" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">refresh_token</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">openid preqin.com.default dataApi.v1.default</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">preqin.com.client</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="refresh_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${refresh_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">refresh_token</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">BearerToken-Refresh</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
          <intProp name="MAX_THREAD_NUMBER">6</intProp>
          <boolProp name="PARENT_SAMPLE">false</boolProp>
          <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Performance " enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Performance PrivateCapital" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PrivateCapital benchmarks" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;benchmarkID&quot;,&quot;name&quot;,&quot;constituentFunds&quot;,&quot;strategy&quot;,&quot;geographicFocus&quot;,&quot;vintage&quot;,&quot;fundCount&quot;,&quot;capitalization&quot;,&quot;asAtDate&quot;,&quot;market.netIRR.median&quot;,&quot;market.netMultiple.median&quot;,&quot;market.rVPI.median&quot;,&quot;market.dPI.median&quot;,&quot;market.called.median&quot;],&quot;sortBy&quot;:&quot;vintage&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Benchmark&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;strategy&quot;,&quot;type&quot;:&quot;list&quot;,&quot;filterBy&quot;:[&quot;Private Capital&quot;]},{&quot;id&quot;:&quot;asAtDate&quot;,&quot;type&quot;:&quot;datelist&quot;,&quot;filterBy&quot;:[&quot;0001-01-01T00:00:00.000Z&quot;]},{&quot;id&quot;:&quot;geographicFocus&quot;,&quot;type&quot;:&quot;list&quot;,&quot;filterBy&quot;:[&quot;All&quot;]}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Best Performing Funds" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;checkBox&quot;,&quot;fundId&quot;,&quot;fundName&quot;,&quot;netIRR&quot;,&quot;fund.basic.universe&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;],&quot;sortBy&quot;:&quot;netIRR&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Best Performing Managers" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;checkBox&quot;,&quot;fundId&quot;,&quot;fundName&quot;,&quot;netIRR&quot;,&quot;fund.basic.universe&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;],&quot;sortBy&quot;:&quot;netIRR&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund -&gt;Advanced Search" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;name&quot;,&quot;basic.strategy&quot;,&quot;geographicFocus.coreLocationsHf&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.sharpeRatio.rfr2.threeYears&quot;],&quot;sortBy&quot;:&quot;name&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfPerformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;includeShareClasses&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund Market Benchmark" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;strategy&quot;,&quot;subStrategy&quot;,&quot;name&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.annualised.fiveYears&quot;,&quot;hf.monthlyReturns.returns.volatility.threeYears&quot;,&quot;hf.monthlyReturns.returns.lastMonthReturn&quot;],&quot;sortBy&quot;:&quot;sortOrder&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfMarketBenchmark&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;includeShareClasses&quot;,&quot;type&quot;:&quot;includeshareclasses&quot;,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;sizeRange&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;Blended Size&quot;],&quot;isInvertedQuery&quot;:true},{&quot;type&quot;:&quot;datelist&quot;,&quot;id&quot;:&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;filterBy&quot;:[&quot;2020-06-30T00:00:00.000Z&quot;]}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund Best Performing Funds" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;basic.fundManager.id&quot;,&quot;hf.monthlyReturns.distribution&quot;,&quot;checkBox&quot;,&quot;name&quot;,&quot;basic.strategy&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.sharpeRatio.rfr2.threeYears&quot;],&quot;sortBy&quot;:&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfPerformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;type&quot;:&quot;datelist&quot;,&quot;filterBy&quot;:[&quot;2020-07-31T00:00:00.000Z&quot;],&quot;isInvertedQuery&quot;:false},{&quot;id&quot;:&quot;includeShareClasses&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private capital-&gt; Applied all the asset class from drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.basic.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;,&quot;PD&quot;,&quot;RE&quot;,&quot;INF&quot;,&quot;NR&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;Selected global location through geography drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.fundGeographicFocus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.region&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Global&quot;]}]},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;Selecting FUND TYPES from fund type and status drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.fundTypeAndStatus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;fund.fundType&quot;,&quot;filterBy&quot;:[&quot;Raising&quot;,&quot;First Close&quot;,&quot;Second Close&quot;,&quot;Third Close&quot;,&quot;Fourth Close&quot;,&quot;Fifth Close&quot;,&quot;Sixth Close&quot;,&quot;Closed&quot;,&quot;Liquidated&quot;,&quot;Announced&quot;,&quot;Estimated&quot;,&quot;Open Ended&quot;,&quot;Evergreen&quot;,&quot;REIT&quot;,&quot;Semi Open Ended&quot;,&quot;Open-Ended (Liquidated)&quot;,&quot;Listed&quot;,&quot;De-Listed&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private capital-&gt; Selecting all the currency from currency field via more filter" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.hf.feesCurrency&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;fund.hf.feesCurrency&quot;,&quot;filterBy&quot;:[&quot;AED&quot;,&quot;ARS&quot;,&quot;ASD&quot;,&quot;AUD&quot;,&quot;BBD&quot;,&quot;BDT&quot;,&quot;BGN&quot;,&quot;BHD&quot;,&quot;BRL&quot;,&quot;BWP&quot;,&quot;CAD&quot;,&quot;CHF&quot;,&quot;CLP&quot;,&quot;COP&quot;,&quot;CZK&quot;,&quot;DKK&quot;,&quot;DM&quot;,&quot;DZD&quot;,&quot;EEK&quot;,&quot;EGP&quot;,&quot;ETB&quot;,&quot;EUR&quot;,&quot;FIM&quot;,&quot;FJD&quot;,&quot;GBP&quot;,&quot;GEL&quot;,&quot;GHS&quot;,&quot;HKD&quot;,&quot;HRK&quot;,&quot;HUF&quot;,&quot;IDR&quot;,&quot;ILS&quot;,&quot;INR&quot;,&quot;IRR&quot;,&quot;ISK&quot;,&quot;JOD&quot;,&quot;JPY&quot;,&quot;KES&quot;,&quot;KRW&quot;,&quot;KWD&quot;,&quot;KZT&quot;,&quot;LBP&quot;,&quot;LKR&quot;,&quot;LTL&quot;,&quot;LVL&quot;,&quot;MAD&quot;,&quot;MRY&quot;,&quot;MUR&quot;,&quot;MXN&quot;,&quot;MYR&quot;,&quot;NAD&quot;,&quot;NGN&quot;,&quot;NLG&quot;,&quot;NOK&quot;,&quot;NZD&quot;,&quot;OMR&quot;,&quot;PEN&quot;,&quot;PGK&quot;,&quot;PHP&quot;,&quot;PKR&quot;,&quot;PLN&quot;,&quot;QAR&quot;,&quot;RMB&quot;,&quot;RON&quot;,&quot;RUB&quot;,&quot;SAR&quot;,&quot;SEK&quot;,&quot;SGD&quot;,&quot;SIT&quot;,&quot;SZL&quot;,&quot;THB&quot;,&quot;TND&quot;,&quot;TRY&quot;,&quot;TTD&quot;,&quot;TWD&quot;,&quot;TZS&quot;,&quot;USD&quot;,&quot;VND&quot;,&quot;XBT&quot;,&quot;XCD&quot;,&quot;ZAR&quot;,&quot;ZMW&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;fund.fundRaising.currency&quot;,&quot;filterBy&quot;:[&quot;AED&quot;,&quot;ARS&quot;,&quot;ASD&quot;,&quot;AUD&quot;,&quot;BBD&quot;,&quot;BDT&quot;,&quot;BGN&quot;,&quot;BHD&quot;,&quot;BRL&quot;,&quot;BWP&quot;,&quot;CAD&quot;,&quot;CHF&quot;,&quot;CLP&quot;,&quot;COP&quot;,&quot;CZK&quot;,&quot;DKK&quot;,&quot;DM&quot;,&quot;DZD&quot;,&quot;EEK&quot;,&quot;EGP&quot;,&quot;ETB&quot;,&quot;EUR&quot;,&quot;FIM&quot;,&quot;FJD&quot;,&quot;GBP&quot;,&quot;GEL&quot;,&quot;GHS&quot;,&quot;HKD&quot;,&quot;HRK&quot;,&quot;HUF&quot;,&quot;IDR&quot;,&quot;ILS&quot;,&quot;INR&quot;,&quot;IRR&quot;,&quot;ISK&quot;,&quot;JOD&quot;,&quot;JPY&quot;,&quot;KES&quot;,&quot;KRW&quot;,&quot;KWD&quot;,&quot;KZT&quot;,&quot;LBP&quot;,&quot;LKR&quot;,&quot;LTL&quot;,&quot;LVL&quot;,&quot;MAD&quot;,&quot;MRY&quot;,&quot;MUR&quot;,&quot;MXN&quot;,&quot;MYR&quot;,&quot;NAD&quot;,&quot;NGN&quot;,&quot;NLG&quot;,&quot;NOK&quot;,&quot;NZD&quot;,&quot;OMR&quot;,&quot;PEN&quot;,&quot;PGK&quot;,&quot;PHP&quot;,&quot;PKR&quot;,&quot;PLN&quot;,&quot;QAR&quot;,&quot;RMB&quot;,&quot;RON&quot;,&quot;RUB&quot;,&quot;SAR&quot;,&quot;SEK&quot;,&quot;SGD&quot;,&quot;SIT&quot;,&quot;SZL&quot;,&quot;THB&quot;,&quot;TND&quot;,&quot;TRY&quot;,&quot;TTD&quot;,&quot;TWD&quot;,&quot;TZS&quot;,&quot;USD&quot;,&quot;VND&quot;,&quot;XBT&quot;,&quot;XCD&quot;,&quot;ZAR&quot;,&quot;ZMW&quot;]}]},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;(More filter)-&gt;Selecting all the strategy via more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.fund.strategy&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.vc&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Venture Capital&quot;]},{&quot;id&quot;:&quot;fund.basic.strategy&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Early Stage&quot;,&quot;Early Stage: Seed&quot;,&quot;Early Stage: Start-up&quot;,&quot;Expansion / Late Stage&quot;,&quot;Venture (General)&quot;,&quot;Balanced&quot;,&quot;Buyout&quot;,&quot;Co-investment&quot;,&quot;Co-Investment&quot;,&quot;Co-Investment Multi-Manager&quot;,&quot;Direct Secondaries&quot;,&quot;Fund of Funds&quot;,&quot;Growth&quot;,&quot;Hybrid&quot;,&quot;Hybrid Fund of Funds&quot;,&quot;PIPE&quot;,&quot;Secondaries&quot;,&quot;Turnaround&quot;,&quot;Real Estate Co-Investment&quot;,&quot;Real Estate Core&quot;,&quot;Real Estate Core-Plus&quot;,&quot;Real Estate Debt&quot;,&quot;Real Estate Distressed&quot;,&quot;Real Estate Fund of Funds&quot;,&quot;Real Estate Opportunistic&quot;,&quot;Real Estate Secondaries&quot;,&quot;Real Estate Value Added&quot;,&quot;Infrastructure Core&quot;,&quot;Infrastructure Core Plus&quot;,&quot;Infrastructure Debt&quot;,&quot;Infrastructure Fund of Funds&quot;,&quot;Infrastructure Opportunistic&quot;,&quot;Infrastructure Secondaries&quot;,&quot;Infrastructure Value Added&quot;,&quot;Direct Lending -&quot;,&quot;Direct Lending&quot;,&quot;Direct Lending - Senior Debt&quot;,&quot;Direct Lending - Unitranche Debt&quot;,&quot;Direct Lending - Junior / Subordinated Debt&quot;,&quot;Direct Lending - Blended / Opportunistic Debt&quot;,&quot;Mezzanine&quot;,&quot;Special Situations&quot;,&quot;Distressed Debt&quot;,&quot;Private Debt Fund of Funds&quot;,&quot;Venture Debt&quot;]},{&quot;id&quot;:&quot;fund.nr.primaryNaturalResourcesStrategy&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Energy&quot;,&quot;Timberland&quot;,&quot;Agriculture/Farmland&quot;,&quot;Metals and Mining&quot;,&quot;Water&quot;,&quot;Diversified Natural Resources&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;(More filter)-&gt;Selecting all the sector fields via more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.industryFocus.industries&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.industryFocus.coreIndustries.group&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Business Services&quot;,&quot;Consumer Discretionary&quot;,&quot;Diversified&quot;,&quot;Energy &amp; Utilities&quot;,&quot;Financial &amp; Insurance Services&quot;,&quot;Healthcare&quot;,&quot;Industrials&quot;,&quot;Information Technology&quot;,&quot;Raw Materials &amp; Natural Resources&quot;,&quot;Real Estate&quot;,&quot;Telecoms &amp; Media&quot;]},{&quot;id&quot;:&quot;fund.industryFocus.industries.group&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Business Services&quot;,&quot;Consumer Discretionary&quot;,&quot;Diversified&quot;,&quot;Energy &amp; Utilities&quot;,&quot;Financial &amp; Insurance Services&quot;,&quot;Healthcare&quot;,&quot;Industrials&quot;,&quot;Information Technology&quot;,&quot;Raw Materials &amp; Natural Resources&quot;,&quot;Real Estate&quot;,&quot;Telecoms &amp; Media&quot;]},{&quot;id&quot;:&quot;fund.industryFocus.industries.industry&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Business Support Services&quot;,&quot;Marketing/Advertising&quot;,&quot;Outsourcing&quot;,&quot;Consumer Products&quot;,&quot;Consumer Services&quot;,&quot;Education/Training&quot;,&quot;Food&quot;,&quot;Retail&quot;,&quot;Transportation Services&quot;,&quot;Travel &amp; Leisure&quot;,&quot;Diversified&quot;,&quot;Oil &amp; Gas&quot;,&quot;Power &amp; Utilities&quot;,&quot;Renewable Energy&quot;,&quot;Financial Services&quot;,&quot;Insurance&quot;,&quot;Biopolymers&quot;,&quot;Biotechnology&quot;,&quot;Healthcare&quot;,&quot;Healthcare IT&quot;,&quot;Healthcare Specialist&quot;,&quot;Medical Devices &amp; Equipment&quot;,&quot;Pharmaceuticals&quot;,&quot;Aerospace&quot;,&quot;Automobiles, Other Vehicles &amp; Parts&quot;,&quot;Bottling&quot;,&quot;Construction&quot;,&quot;Defence&quot;,&quot;Energy Storage &amp; Batteries&quot;,&quot;Environmental Services&quot;,&quot;Heating, Cooling &amp; Ventilation Equipment and Services&quot;,&quot;Industrial Machinery&quot;,&quot;Logistics &amp; Distribution&quot;,&quot;Packaging&quot;,&quot;Rail Transport&quot;,&quot;Ship Building &amp; Repair&quot;,&quot;Electronics&quot;,&quot;Hardware&quot;,&quot;Internet&quot;,&quot;IT Infrastructure&quot;,&quot;IT Security/Cybersecurity&quot;,&quot;Semiconductors&quot;,&quot;Software&quot;,&quot;Agribusiness&quot;,&quot;Chemicals&quot;,&quot;Forestry &amp; Timber&quot;,&quot;Materials&quot;,&quot;Mining&quot;,&quot;Commercial Property&quot;,&quot;Real Estate Development &amp; Operating Companies&quot;,&quot;Information Services&quot;,&quot;Media&quot;,&quot;Telecoms&quot;]},{&quot;id&quot;:&quot;fund.industryFocus.verticals.vertical&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;3D Printing&quot;,&quot;AdTech&quot;,&quot;Agtech&quot;,&quot;Artificial Intelligence&quot;,&quot;Augmented Reality (AR)&quot;,&quot;Big Data&quot;,&quot;Blockchain&quot;,&quot;Cannabis/Medical Marijuana&quot;,&quot;Clean Technology&quot;,&quot;Cloud Computing&quot;,&quot;E-commerce&quot;,&quot;EdTech&quot;,&quot;Electric &amp; Hybrid Vehicles&quot;,&quot;FinTech&quot;,&quot;HealthTech&quot;,&quot;Infrastructure&quot;,&quot;InsureTech&quot;,&quot;IoT (Internet of Things)&quot;,&quot;Manufacturing&quot;,&quot;Mobile Apps&quot;,&quot;Nanotechnology&quot;,&quot;Real Estate Tech&quot;,&quot;RegTech&quot;,&quot;Research (Non-Medical)&quot;,&quot;Robotics&quot;,&quot;Social Media&quot;,&quot;Urban Planning&quot;,&quot;Virtual Reality (VR)&quot;,&quot;Wearables &amp; Quantified Self&quot;]},{&quot;id&quot;:&quot;fund.industryFocus.verticals.subVertical&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Autonomous Vehicle&quot;,&quot;Chatbots&quot;,&quot;Deep Learning&quot;,&quot;Machine Learning&quot;,&quot;Clickstream Data&quot;,&quot;Financial Data&quot;,&quot;Gaming Data&quot;,&quot;Input Data&quot;,&quot;Point of Sale Data&quot;,&quot;Sensor Data&quot;,&quot;Web Log Data&quot;,&quot;Cryptocurrency&quot;,&quot;File/Cloud Storage&quot;,&quot;Identity Management&quot;,&quot;Smart Contracts&quot;,&quot;Daas&quot;,&quot;Iaas&quot;,&quot;Paas&quot;,&quot;Saas&quot;,&quot;Shared Economy&quot;,&quot;Digital Brokerage&quot;,&quot;eWallets &amp; Money Transfer&quot;,&quot;Exchange/Trading Platforms&quot;,&quot;Lending&quot;,&quot;Online Banking&quot;,&quot;Processing &amp; Payment Infrastructure&quot;,&quot;Robo-advisors&quot;,&quot;Smart-Pay: Physical-Digital Interactions&quot;,&quot;Wealth Management&quot;,&quot;Edge Computing&quot;,&quot;Smart Agriculture/Farming&quot;,&quot;Smart City&quot;,&quot;Smart Grid&quot;,&quot;Smart Home&quot;,&quot;Smart Retail&quot;,&quot;Smart Supply Chain&quot;,&quot;Mobile Messaging&quot;,&quot;Drones&quot;]},{&quot;id&quot;:&quot;fund.re.propertyTypes.text&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Hotels&quot;,&quot;Hospitality&quot;,&quot;Resort&quot;,&quot;Industrial&quot;,&quot;Data Center&quot;,&quot;Warehouse / Distribution&quot;,&quot;Flex&quot;,&quot;Logistics&quot;,&quot;R&amp;D&quot;,&quot;Land&quot;,&quot;Development Site&quot;,&quot;Mixed Use&quot;,&quot;Niche&quot;,&quot;Car Park&quot;,&quot;Casinos&quot;,&quot;Education&quot;,&quot;Leisure/Entertainment&quot;,&quot;Medical/Healthcare&quot;,&quot;Self Storage&quot;,&quot;Senior Home&quot;,&quot;Stadium&quot;,&quot;Student Housing&quot;,&quot;Office&quot;,&quot;Operating Company&quot;,&quot;Residential&quot;,&quot;Apartment&quot;,&quot;Condominium&quot;,&quot;Multi-family&quot;,&quot;Single-Family&quot;,&quot;Retail&quot;,&quot;Shopping Center&quot;]},{&quot;id&quot;:&quot;fund.inf.sectorPreferences&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Energy&quot;,&quot;Natural Resources&quot;,&quot;Logistics&quot;,&quot;Distribution/Storage Facilities&quot;,&quot;Renewable Energy&quot;,&quot;Clean Technology&quot;,&quot;Social&quot;,&quot;Defence&quot;,&quot;Education Facilities&quot;,&quot;Government Accommodation&quot;,&quot;Healthcare/Medical Facilities&quot;,&quot;Senior Homes&quot;,&quot;Judicial Buildings&quot;,&quot;Prisons&quot;,&quot;Telecom&quot;,&quot;Satellite Networks&quot;,&quot;Transportation&quot;,&quot;Aviation/Aerospace&quot;,&quot;Railway&quot;,&quot;Roads&quot;,&quot;Bridges&quot;,&quot;Parking Lots&quot;,&quot;Tunnels&quot;,&quot;Sea Ports&quot;,&quot;Utilities&quot;,&quot;Water&quot;,&quot;Waste Management&quot;,&quot;Environmental Services&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Agriculture/Farmland&quot;,&quot;Energy&quot;,&quot;Metals and Mining&quot;,&quot;Timberland&quot;,&quot;Water&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.agriculture.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Commodity&quot;,&quot;Process/Stage&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.agriculture.commodities.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Annual/Row&quot;,&quot;Livestock&quot;,&quot;Perennial/Permanent&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.agriculture.processes&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Agtech&quot;,&quot;Land Owner&quot;,&quot;Operator&quot;,&quot;Owner Operator&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.energy.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Commodity&quot;,&quot;Process/Stage&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.energy.commodities.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Coal&quot;,&quot;Natural Gas&quot;,&quot;Oil&quot;,&quot;Renewables&quot;,&quot;Uranium&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.energy.processes&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Downstream&quot;,&quot;Midstream&quot;,&quot;Oil Field Services&quot;,&quot;Upstream&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.metal.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Commodity&quot;,&quot;Process/Stage&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.metal.commodities.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Aluminium/Bauxite&quot;,&quot;Copper&quot;,&quot;Lead&quot;,&quot;Nickel&quot;,&quot;Tin&quot;,&quot;Zinc&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.metal.processes&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Exploration&quot;,&quot;Refining&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.timberland.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Commodity&quot;,&quot;Process/Stage&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.timberland.commodities.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Hardwood&quot;,&quot;Softwood&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.timberland.processes&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Natural Forests&quot;,&quot;Tree Farms&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.water.exists&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Process/Stage&quot;]},{&quot;id&quot;:&quot;fund.nr.sectors.water.processes&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Water Industrials&quot;,&quot;Water Utilities&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;(More filter)-&gt;Selecting all the ONSHORE and OFFSHORE domicile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.structure.domicile&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.structure.domicile&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Armenia&quot;,&quot;Australia&quot;,&quot;Austria&quot;,&quot;Belgium&quot;,&quot;Brazil&quot;,&quot;Canada&quot;,&quot;Alberta&quot;,&quot;Manitoba&quot;,&quot;Ontario&quot;,&quot;British Columbia&quot;,&quot;New Brunswick&quot;,&quot;Newfoundland and Labrador&quot;,&quot;Northwest Territories&quot;,&quot;Nova Scotia&quot;,&quot;Nunavut&quot;,&quot;Prince Edward Island&quot;,&quot;Quebec&quot;,&quot;Saskatchewan&quot;,&quot;Chile&quot;,&quot;China&quot;,&quot;Colombia&quot;,&quot;Czech Republic&quot;,&quot;Delaware&quot;,&quot;Denmark&quot;,&quot;England&quot;,&quot;Estonia&quot;,&quot;Finland&quot;,&quot;France&quot;,&quot;Germany&quot;,&quot;Greece&quot;,&quot;Hungary&quot;,&quot;Iceland&quot;,&quot;India&quot;,&quot;Indonesia&quot;,&quot;Italy&quot;,&quot;Ivory Coast&quot;,&quot;Kenya&quot;,&quot;Kuwait&quot;,&quot;Latvia&quot;,&quot;Lithuania&quot;,&quot;Mexico&quot;,&quot;Morocco&quot;,&quot;Namibia&quot;,&quot;Nepal&quot;,&quot;Netherlands&quot;,&quot;New Zealand&quot;,&quot;Nigeria&quot;,&quot;Norway&quot;,&quot;Pakistan&quot;,&quot;Peru&quot;,&quot;Poland&quot;,&quot;Portugal&quot;,&quot;Russia&quot;,&quot;Saudi Arabia&quot;,&quot;Slovakia&quot;,&quot;South Africa&quot;,&quot;South Korea&quot;,&quot;Spain&quot;,&quot;Sri Lanka&quot;,&quot;Sweden&quot;,&quot;Taiwan&quot;,&quot;Tanzania&quot;,&quot;Turkey&quot;,&quot;Uganda&quot;,&quot;UK&quot;,&quot;Ukraine&quot;,&quot;US-Domestic&quot;,&quot;California&quot;,&quot;Colorado&quot;,&quot;Florida&quot;,&quot;Georgia&quot;,&quot;Illinois&quot;,&quot;Iowa&quot;,&quot;Kansas&quot;,&quot;Maryland&quot;,&quot;Massachusetts&quot;,&quot;Michigan&quot;,&quot;Minnesota&quot;,&quot;Missouri&quot;,&quot;Nevada&quot;,&quot;New Jersey&quot;,&quot;New York&quot;,&quot;North Carolina&quot;,&quot;North Dakota&quot;,&quot;Ohio&quot;,&quot;Oklahoma&quot;,&quot;Pennsylvania&quot;,&quot;South Carolina&quot;,&quot;Texas&quot;,&quot;Virginia&quot;,&quot;Washington&quot;,&quot;Wisconsin&quot;,&quot;Alabama&quot;,&quot;Alaska&quot;,&quot;Arizona&quot;,&quot;Arkansas&quot;,&quot;Connecticut&quot;,&quot;DC&quot;,&quot;Hawaii&quot;,&quot;Idaho&quot;,&quot;Indiana&quot;,&quot;Kentucky&quot;,&quot;Louisiana&quot;,&quot;Maine&quot;,&quot;Mississippi&quot;,&quot;Montana&quot;,&quot;Nebraska&quot;,&quot;New Hampshire&quot;,&quot;New Mexico&quot;,&quot;Oregon&quot;,&quot;Rhode Island&quot;,&quot;South Dakota&quot;,&quot;Tennessee&quot;,&quot;Utah&quot;,&quot;Vermont&quot;,&quot;West Virginia&quot;,&quot;Wyoming&quot;,&quot;Zambia&quot;,&quot;Bahamas&quot;,&quot;Bahrain&quot;,&quot;Bermuda&quot;,&quot;Botswana&quot;,&quot;British Virgin Islands&quot;,&quot;Cayman Islands&quot;,&quot;Cyprus&quot;,&quot;Ghana&quot;,&quot;Gibraltar&quot;,&quot;Guernsey&quot;,&quot;Hong Kong&quot;,&quot;Ireland&quot;,&quot;Isle of Man&quot;,&quot;Israel&quot;,&quot;Japan&quot;,&quot;Jersey&quot;,&quot;Lebanon&quot;,&quot;Liechtenstein&quot;,&quot;Luxembourg&quot;,&quot;Malaysia&quot;,&quot;Malta&quot;,&quot;Marshall Islands&quot;,&quot;Mauritius&quot;,&quot;Netherlands Antilles&quot;,&quot;Panama&quot;,&quot;Seychelles&quot;,&quot;Singapore&quot;,&quot;St. Lucia&quot;,&quot;Switzerland&quot;,&quot;United Arab Emirates&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;(More filter)-&gt;Selecting all the Geography fields from more filters " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;preqinQuartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.basic.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;,&quot;PD&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.fundTypeAndStatus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;fund.fundType&quot;,&quot;filterBy&quot;:[&quot;Raising&quot;,&quot;First Close&quot;,&quot;Second Close&quot;,&quot;Third Close&quot;,&quot;Fourth Close&quot;,&quot;Fifth Close&quot;,&quot;Sixth Close&quot;,&quot;Closed&quot;,&quot;Liquidated&quot;,&quot;Announced&quot;,&quot;Estimated&quot;,&quot;Open Ended&quot;,&quot;Evergreen&quot;,&quot;REIT&quot;,&quot;Semi Open Ended&quot;,&quot;Open-Ended (Liquidated)&quot;,&quot;Listed&quot;,&quot;De-Listed&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.fund.strategy&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.basic.strategy&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Balanced&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;fund.locations.fundManager&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.region&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;North America&quot;]}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;mostRecentDateReported&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;(More filter)-&gt;Select all the fund manager location" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;fund.locations.fundManager&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.region&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;North America&quot;,&quot;Europe&quot;,&quot;Asia&quot;,&quot;Australasia&quot;,&quot;Middle East&quot;,&quot;Latin America &amp; Caribbean&quot;,&quot;Africa&quot;]}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Capital-&gt;(More filter)-&gt;Selecting all private capital locations" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;fundId&quot;,&quot;fund.basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;fundName&quot;,&quot;fund.basic.universe&quot;,&quot;fund.privateCapital.vintage&quot;,&quot;fund.basic.strategy&quot;,&quot;fund.fundRaising.finalClose.size.usdMn&quot;,&quot;netIRR&quot;,&quot;netMultiple.percent&quot;,&quot;rVPI.percent&quot;,&quot;dPI.percent&quot;,&quot;called.percent&quot;,&quot;quartile&quot;,&quot;asAt&quot;,&quot;fund.fundRaising.status&quot;,&quot;fund.geographicFocus.coreGeographicExposure&quot;,&quot;fund.basic.fundManager.name&quot;,&quot;fund.basic.fundManager.headquarterAddress.country&quot;,&quot;fund.industryFocus.coreIndustries&quot;,&quot;fund.industryFocus.verticals&quot;],&quot;sortBy&quot;:&quot;fundName&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Fundperformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;fund.geographicFocus.mainFundFocus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;fund.geographicFocus.mainFundFocus&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;North America&quot;,&quot;Europe&quot;,&quot;Africa&quot;,&quot;Americas&quot;,&quot;Asia&quot;,&quot;Australasia&quot;,&quot;Middle East &amp; Israel&quot;,&quot;Diversified Multi-Regional&quot;]}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;Or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netIRR&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]},{&quot;id&quot;:&quot;some&quot;,&quot;type&quot;:&quot;aggregate&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;exists&quot;},{&quot;id&quot;:&quot;netMultiple.percent&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;filterBy&quot;:-999,&quot;isInvertedQuery&quot;:true}]}]},{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund-&gt;Select all fund type and status from drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;name&quot;,&quot;basic.strategy&quot;,&quot;geographicFocus.coreLocationsHf&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.sharpeRatio.rfr2.threeYears&quot;],&quot;sortBy&quot;:&quot;name&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfPerformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fundTypeAndStatus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;fundRaising.status&quot;,&quot;filterBy&quot;:[&quot;Raising&quot;,&quot;First Close&quot;,&quot;Second Close&quot;,&quot;Third Close &quot;,&quot;Fourth Close&quot;,&quot;Fifth Close&quot;,&quot;Sixth Close&quot;,&quot;Listed&quot;,&quot;Open Ended&quot;,&quot;Evergreen&quot;,&quot;REIT&quot;,&quot;Semi Open Ended&quot;,&quot;Active&quot;,&quot;Open to Investment/Raising&quot;,&quot;Closed&quot;,&quot;Open to investment=No&quot;,&quot;Closed to Investment&quot;,&quot;Liquidated&quot;,&quot;De-Listed&quot;,&quot;Open-Ended (Liquidated)&quot;,&quot;Announced&quot;,&quot;Estimated&quot;,&quot;In Formation&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;structure.isSeparateAccount&quot;,&quot;filterBy&quot;:[&quot;false&quot;,&quot;true&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;structure.structureType&quot;,&quot;filterBy&quot;:[&quot;UCITS&quot;,&quot;Alternative Mutual Hedge Fund&quot;,&quot;Alternative Mutual&quot;,&quot;Alternative Mutual Fund&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;basic.category&quot;,&quot;filterBy&quot;:[&quot;CTA&quot;,&quot;Fund of Hedge Funds&quot;,&quot;Fund of CTAs&quot;,&quot;Hedge Fund&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;includeShareClasses&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund-&gt;Select startegy&apos;s from drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;name&quot;,&quot;basic.strategy&quot;,&quot;geographicFocus.coreLocationsHf&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.sharpeRatio.rfr2.threeYears&quot;],&quot;sortBy&quot;:&quot;name&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfPerformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fund.strategy&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;hf.coreStrategies.text&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Equity Strategies&quot;,&quot;Long/Short Equity&quot;,&quot;Short Bias&quot;,&quot;Long Bias&quot;,&quot;Variable Bias&quot;,&quot;130/30&quot;,&quot;Directional&quot;,&quot;Value-Oriented&quot;,&quot;Sector-Focused&quot;,&quot;Event Driven Strategies&quot;,&quot;Event Driven&quot;,&quot;Risk/Merger Arbitrage&quot;,&quot;Opportunistic&quot;,&quot;Distressed&quot;,&quot;Special Situations&quot;,&quot;Credit Strategies&quot;,&quot;Long/Short Credit&quot;,&quot;Fixed Income&quot;,&quot;Asset-Backed Lending Strategies&quot;,&quot;Mortgage-Backed Strategies&quot;,&quot;Specialist Credit&quot;,&quot;Relative Value Strategies&quot;,&quot;Relative Value Arbitrage&quot;,&quot;Convertible Arbitrage&quot;,&quot;Fixed Income Arbitrage&quot;,&quot;Equity Market Neutral&quot;,&quot;Statistical Arbitrage&quot;,&quot;Capital Structure Arbitrage&quot;,&quot;Macro Strategies&quot;,&quot;Macro&quot;,&quot;Commodities&quot;,&quot;Foreign Exchange&quot;,&quot;Managed Futures / CTA&quot;,&quot;Managed Futures/CTA&quot;,&quot;Multi-Strategy&quot;,&quot;Diversified&quot;,&quot;Niche Strategies&quot;,&quot;Insurance-Linked Strategies&quot;,&quot;Niche&quot;,&quot;Real Estate&quot;,&quot;Cryptocurrency&quot;,&quot;Alternative Risk Premia&quot;,&quot;Carry&quot;,&quot;Defensive&quot;,&quot;Liquidity/Size&quot;,&quot;Mean Reversion&quot;,&quot;Momentum&quot;,&quot;Value&quot;,&quot;Volatility&quot;]},{&quot;id&quot;:&quot;hf.cTAStrategyPreferences&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Arbitrage&quot;,&quot;Counter Trend&quot;,&quot;Macro&quot;,&quot;Option Writing&quot;,&quot;Pattern Recognition&quot;,&quot;Trend Following&quot;]}],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund-&gt;Select search for geographic focus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;name&quot;,&quot;basic.strategy&quot;,&quot;geographicFocus.coreLocationsHf&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.sharpeRatio.rfr2.threeYears&quot;],&quot;sortBy&quot;:&quot;name&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfPerformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;fundGeographicFocus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;region&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Global&quot;,&quot;North America&quot;,&quot;Europe&quot;,&quot;Asia&quot;,&quot;Australasia&quot;,&quot;Middle East&quot;,&quot;Latin America &amp; Caribbean&quot;,&quot;Africa&quot;]}]},{&quot;id&quot;:&quot;officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hedge Fund-&gt;Select Asset types traded" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;basic.fundManager.id&quot;,&quot;checkBox&quot;,&quot;name&quot;,&quot;basic.strategy&quot;,&quot;geographicFocus.coreLocationsHf&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.sharpeRatio.rfr2.threeYears&quot;],&quot;sortBy&quot;:&quot;name&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfPerformance&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;officeType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;head_office&quot;]},{&quot;id&quot;:&quot;fund.hf.trading&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;or&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;hf.methodsOfInvestmentEmployedList&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Cryptocurrency&quot;,&quot;Debt&quot;,&quot;Derivative Markets&quot;,&quot;Derivatives&quot;,&quot;Equities&quot;,&quot;Other&quot;]},{&quot;id&quot;:&quot;hf.typesOfMarketsTradedList&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Bonds&quot;,&quot;Currencies&quot;,&quot;Energy&quot;,&quot;Grains&quot;,&quot;Interest Rates&quot;,&quot;Meats&quot;,&quot;Metals&quot;,&quot;Softs&quot;,&quot;Stock Indexes&quot;]}]}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Custom Benchmarks" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;id&quot;:&quot;isLatest&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;asAt&quot;,&quot;type&quot;:&quot;datelist&quot;,&quot;filterBy&quot;:[&quot;0001-01-01T00:00:00.000Z&quot;],&quot;isInvertedQuery&quot;:true}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" Hedge Fund Custom Benchmarks" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;name&quot;,&quot;hf.monthlyReturns.returns.asAtDate&quot;,&quot;hf.monthlyReturns.returns.return&quot;,&quot;hf.monthlyReturns.returns.ytd&quot;,&quot;hf.monthlyReturns.returns.cumulative.twelveMonths&quot;,&quot;hf.monthlyReturns.returns.annualised.threeYears&quot;,&quot;hf.monthlyReturns.returns.annualised.fiveYears&quot;,&quot;hf.monthlyReturns.returns.volatility.threeYears&quot;,&quot;hf.monthlyReturns.returns.lastMonthReturn&quot;],&quot;sortBy&quot;:&quot;sortOrder&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;HfCustomBenchmark&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;includeShareClasses&quot;,&quot;type&quot;:&quot;includeshareclasses&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;performanceCalcAsAtDate&quot;,&quot;type&quot;:&quot;datelist&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;2017-12-31T00:00:00.000Z&quot;]}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/hfBenchmark/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Deals and exits" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deal search-&gt; Buyout" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;pE.portfolioCompany.isUnknown&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false,&quot;isInvertedQuery&quot;:true,&quot;type&quot;:&quot;boolean&quot;}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">Application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deal search-&gt; Venture Capital" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.stage&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;VC&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deal search-&gt; Private Debt" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;debtFinancing.tranches.debtProviderFirms.name&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;debtFinancing.debtSize.localMn&quot;,&quot;debtFinancing.debtSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PD&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deal search-&gt; Real Estate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;rE.assets.id&quot;,&quot;basic.name&quot;,&quot;basic.dealDate&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;rE.dealDetail.transactionType&quot;,&quot;rE.dealDetail.coreDealLocation.country&quot;,&quot;rE.dealDetail.coreDealAssetType&quot;,&quot;buyers.investor.name&quot;,&quot;sellers.investor&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;RE&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deal search-&gt; Infrastructure" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;iNF.assetDetails.assetID&quot;,&quot;iNF.assetDetails.name&quot;,&quot;iNF.assetPrimaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;basic.dealStatus&quot;,&quot;iNF.assetIndustryPreference.text&quot;,&quot;buyers.investor.name&quot;,&quot;sellers.investor&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;INF&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Deals and exits" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Exits Search-&gt; Buyout" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.pE.portfolioCompany.primaryAddress.country&quot;,&quot;entity.pE.exits.date&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.pE.exits.type&quot;,&quot;entity.pE.exits.acquirors&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.pE.exits.currency&quot;,&quot;entity.pE.exits.soldFor.localMn&quot;,&quot;entity.pE.exits.soldFor.usdMn&quot;,&quot;entity.pE.exits.partiallyExited&quot;],&quot;sortBy&quot;:&quot;entity.pE.exits.date&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealExit&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Exits Search-&gt; Venture Capital" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.pE.portfolioCompany.primaryAddress.country&quot;,&quot;entity.pE.exits.date&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.pE.exits.type&quot;,&quot;entity.pE.exits.acquirors&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.pE.exits.currency&quot;,&quot;entity.pE.exits.soldFor.localMn&quot;,&quot;entity.pE.exits.soldFor.usdMn&quot;,&quot;entity.pE.exits.partiallyExited&quot;],&quot;sortBy&quot;:&quot;entity.pE.exits.date&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealExit&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;VC&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Exits Search-&gt; Potential Buyout Exits" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;expectedExits.potentialExitStatus&quot;,&quot;expectedExits.expectedExitDate&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;buyerFunds.names&quot;,&quot;expectedExits.exitType&quot;,&quot;expectedExits.expectedExitAmount&quot;,&quot;iPOFilings.estimatedIpoAmount&quot;,&quot;iPOFilings.filingDate&quot;],&quot;sortBy&quot;:&quot;expectedExits.expectedExitDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;pE.exits.partiallyExited&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;potentialExit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Real Estate Asset Search" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;name&quot;,&quot;headquarterAddress.city&quot;,&quot;headquarterAddress.country&quot;,&quot;background.reAssetType&quot;,&quot;deals.ownerFirms&quot;],&quot;sortBy&quot;:&quot;name&quot;,&quot;sortOrder&quot;:&quot;ascending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Asset&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;type&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;Real Estate Asset&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buyout-&gt; Select investment Type for deals buyout page " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;pE.dealDetails.investmentType&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;pE.dealDetails.investmentType&quot;,&quot;filterBy&quot;:[&quot;Add-on&quot;,&quot;Buyout&quot;,&quot;Distressed Debt&quot;,&quot;Growth Capital&quot;,&quot;Merger&quot;,&quot;PIPE&quot;,&quot;Public To Private&quot;,&quot;Recapitalisation&quot;,&quot;Restructuring&quot;,&quot;Special Situations&quot;,&quot;Turnaround&quot;]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;pE.portfolioCompany.isUnknown&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false,&quot;isInvertedQuery&quot;:true,&quot;type&quot;:&quot;boolean&quot;}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buyout-&gt; Select primary industry and vertical industry for buyout page " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;pE.portfolioCompany.subIndustries&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;And&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;pE.portfolioCompany.subIndustries&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;pE.portfolioCompany.subIndustries.group&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;Business Services&quot;,&quot;Consumer Discretionary&quot;,&quot;Energy &amp; Utilities&quot;,&quot;Financial &amp; Insurance Services&quot;,&quot;Healthcare&quot;,&quot;Industrials&quot;,&quot;Information Technology&quot;,&quot;Raw Materials &amp; Natural Resources&quot;,&quot;Real Estate&quot;,&quot;Telecoms &amp; Media&quot;]}]},{&quot;id&quot;:&quot;pE.portfolioCompany.subIndustries&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;pE.portfolioCompany.verticals.vertical&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;3D Printing&quot;,&quot;AdTech&quot;,&quot;Agtech&quot;,&quot;Artificial Intelligence&quot;,&quot;Augmented Reality (AR)&quot;,&quot;Big Data&quot;,&quot;Blockchain&quot;,&quot;Cannabis/Medical Marijuana&quot;,&quot;Clean Technology&quot;,&quot;Cloud Computing&quot;,&quot;E-commerce&quot;,&quot;EdTech&quot;,&quot;Electric &amp; Hybrid Vehicles&quot;,&quot;FinTech&quot;,&quot;HealthTech&quot;,&quot;Infrastructure&quot;,&quot;InsureTech&quot;,&quot;IoT (Internet of Things)&quot;,&quot;Manufacturing&quot;,&quot;Mobile Apps&quot;,&quot;Nanotechnology&quot;,&quot;Real Estate Tech&quot;,&quot;RegTech&quot;,&quot;Research (Non-Medical)&quot;,&quot;Robotics&quot;,&quot;Social Media&quot;,&quot;Urban Planning&quot;,&quot;Virtual Reality (VR)&quot;,&quot;Wearables &amp; Quantified Self&quot;]}]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;pE.portfolioCompany.isUnknown&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false,&quot;isInvertedQuery&quot;:true,&quot;type&quot;:&quot;boolean&quot;}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buyout-&gt; Select Investor type through more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;buyers.investor.type.text&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;buyers.investor.type.text&quot;,&quot;filterBy&quot;:[&quot;Private Equity Firm&quot;,&quot;Real Estate Firm&quot;,&quot;Infrastructure Firm (Investor)&quot;,&quot;Private Equity Firm (Investor)&quot;,&quot;Real Estate Firm (Investor)&quot;,&quot;Private Debt Firm&quot;,&quot;Hedge Fund Manager&quot;,&quot;Infrastructure Firm&quot;,&quot;Fund Manager&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;buyers.investor.type.text&quot;,&quot;filterBy&quot;:[&quot;Asset Manager&quot;,&quot;Bank&quot;,&quot;Corporate Investor&quot;,&quot;Endowment Plan&quot;,&quot;Foundation&quot;,&quot;Private Equity Fund of Funds Manager&quot;,&quot;Secondary Fund of Funds Manager&quot;,&quot;Listed Fund of Funds Manager&quot;,&quot;Hybrid Fund of Funds Manager&quot;,&quot;Real Assets Fund of Funds Manager&quot;,&quot;Private Debt Fund of Funds Manager&quot;,&quot;Real Estate Fund of Funds Manager&quot;,&quot;Infrastructure Fund of Funds Manager&quot;,&quot;Secondary Real Estate&quot;,&quot;Fund of Hedge Funds Manager&quot;,&quot;Fund of Funds Manager&quot;,&quot;Government Agency&quot;,&quot;Insurance Company&quot;,&quot;Investment Bank&quot;,&quot;Investment Company&quot;,&quot;Investment Trust&quot;,&quot;Private Sector Pension Fund&quot;,&quot;Public Pension Fund&quot;,&quot;Sovereign Wealth Fund&quot;,&quot;Superannuation Scheme&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;buyers.investor.type.text&quot;,&quot;filterBy&quot;:[&quot;Family Office - Single&quot;,&quot;Family Office - Multi&quot;,&quot;Wealth Manager&quot;]}],&quot;nestedPath&quot;:&quot;buyers&quot;},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;pE.portfolioCompany.isUnknown&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false,&quot;isInvertedQuery&quot;:true,&quot;type&quot;:&quot;boolean&quot;}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buyout-&gt; Select deal specific from the more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;dealSpecifics&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;basic.dealStatus&quot;,&quot;filterBy&quot;:[&quot;Abandoned&quot;,&quot;Announced&quot;,&quot;Bidding&quot;,&quot;Completed&quot;,&quot;Rejected&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;pE.portfolioCompany.status&quot;,&quot;filterBy&quot;:[&quot;Active&quot;,&quot;Realised&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;pE.dealDetails.stake&quot;,&quot;filterBy&quot;:[&quot;Controlling&quot;,&quot;Full Ownership&quot;,&quot;Minority&quot;,&quot;Majority&quot;]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;pE.portfolioCompany.isUnknown&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false,&quot;isInvertedQuery&quot;:true,&quot;type&quot;:&quot;boolean&quot;}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buyout-&gt; Select deal locations via more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealStatus&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.subIndustries.text&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;basic.currency&quot;,&quot;basic.dealSize.localMn&quot;,&quot;basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;locations.deal.pE.portfolioCompany.primaryAddress&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;id&quot;:&quot;region&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterBy&quot;:[&quot;North America&quot;,&quot;Europe&quot;,&quot;Asia&quot;,&quot;Australasia&quot;,&quot;Middle East&quot;,&quot;Latin America &amp; Caribbean&quot;,&quot;Africa&quot;]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;pE.portfolioCompany.isUnknown&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false,&quot;isInvertedQuery&quot;:true,&quot;type&quot;:&quot;boolean&quot;}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Exit Search-&gt;Buyout-&gt; Select deal details from manage columns " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.pE.portfolioCompany.primaryAddress.country&quot;,&quot;entity.pE.exits.date&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.pE.exits.type&quot;,&quot;entity.pE.exits.acquirors&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.pE.exits.currency&quot;,&quot;entity.pE.exits.soldFor.localMn&quot;,&quot;entity.pE.exits.soldFor.usdMn&quot;,&quot;entity.pE.exits.partiallyExited&quot;,&quot;basic&quot;,&quot;entity.basic.dealStatus&quot;,&quot;entity.pE.dealDetails.investmentType&quot;,&quot;entity.pE.portfolioCompany.status&quot;,&quot;entity.pE.dealDetails.stake&quot;,&quot;entity.buyers.investor.name&quot;,&quot;entity.buyerFunds.names&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.group&quot;,&quot;entity.pE.portfolioCompany.sICCodes.industry.code&quot;,&quot;entity.pE.portfolioCompany.sICCodes.industry.name&quot;,&quot;entity.pE.portfolioCompany.nAICSCodes.uSIndustry.code&quot;,&quot;entity.pE.portfolioCompany.nAICSCodes.uSIndustry.name&quot;,&quot;entity.sellers.investor&quot;,&quot;entity.buyers.leadPartners.text&quot;,&quot;entity.buyers.boardMembers.text&quot;],&quot;sortBy&quot;:&quot;entity.pE.exits.date&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealExit&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Exit Search-&gt;Buyout-&gt; Select deal details from manage columns " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.pE.portfolioCompany.primaryAddress.country&quot;,&quot;entity.pE.exits.date&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.pE.exits.type&quot;,&quot;entity.pE.exits.acquirors&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.pE.exits.currency&quot;,&quot;entity.pE.exits.soldFor.localMn&quot;,&quot;entity.pE.exits.soldFor.usdMn&quot;,&quot;entity.pE.exits.partiallyExited&quot;,&quot;entity.pE.exits&quot;,&quot;entity.pE.exits.soldFor.eurMn&quot;,&quot;entity.pE.exits.multiple&quot;,&quot;entity.pE.exits.iRR&quot;],&quot;sortBy&quot;:&quot;entity.pE.exits.date&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealExit&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Potential buyout exits-&gt; Select exits status from the drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;expectedExits.potentialExitStatus&quot;,&quot;expectedExits.expectedExitDate&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;buyerFunds.names&quot;,&quot;expectedExits.exitType&quot;,&quot;expectedExits.expectedExitAmount&quot;,&quot;iPOFilings.estimatedIpoAmount&quot;,&quot;iPOFilings.filingDate&quot;],&quot;sortBy&quot;:&quot;expectedExits.expectedExitDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;pE.exits.partiallyExited&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;potentialExitStatus&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;potentialExitStatus&quot;,&quot;filterBy&quot;:[&quot;Expected&quot;,&quot;Estimated&quot;,&quot;IPO&quot;]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;potentialExit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Potential buyout exits-&gt; Select EXIT TYPE through more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;expectedExits.potentialExitStatus&quot;,&quot;expectedExits.expectedExitDate&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;buyerFunds.names&quot;,&quot;expectedExits.exitType&quot;,&quot;expectedExits.expectedExitAmount&quot;,&quot;iPOFilings.estimatedIpoAmount&quot;,&quot;iPOFilings.filingDate&quot;],&quot;sortBy&quot;:&quot;expectedExits.expectedExitDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;pE.exits.partiallyExited&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;exitSpecifics&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;expectedExits.exitType&quot;,&quot;filterBy&quot;:[&quot;IPO&quot;,&quot;Merger&quot;,&quot;Partially Exited/Realised&quot;,&quot;Private Placement&quot;,&quot;Recapitalisation&quot;,&quot;Restructuring&quot;,&quot;Sale to GP&quot;,&quot;Sale to Management&quot;,&quot;Trade Sale&quot;,&quot;Unspecified Exit&quot;,&quot;Write Off&quot;]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;potentialExit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Potential buyout exits-&gt; Select INVESTMENT STAKE&apos;s from  more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;id&quot;,&quot;pE.portfolioCompany.id&quot;,&quot;pE.portfolioCompany.name&quot;,&quot;pE.portfolioCompany.primaryAddress.country&quot;,&quot;pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;pE.portfolioCompany.verticals.text&quot;,&quot;expectedExits.potentialExitStatus&quot;,&quot;expectedExits.expectedExitDate&quot;,&quot;basic.dealDate&quot;,&quot;basic.dealSize.usdMn&quot;,&quot;pE.dealDetails.investmentType&quot;,&quot;buyers.investor.name&quot;,&quot;buyerFunds.names&quot;,&quot;expectedExits.exitType&quot;,&quot;expectedExits.expectedExitAmount&quot;,&quot;iPOFilings.estimatedIpoAmount&quot;,&quot;iPOFilings.filingDate&quot;],&quot;sortBy&quot;:&quot;expectedExits.expectedExitDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;Deal&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;pE.exits.partiallyExited&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:true},{&quot;id&quot;:&quot;dealSpecifics&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:&quot;and&quot;,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;pE.dealDetails.stake&quot;,&quot;filterBy&quot;:[&quot;Controlling&quot;,&quot;Full Ownership&quot;,&quot;Minority&quot;,&quot;Majority&quot;]}]},{&quot;id&quot;:&quot;assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PE&quot;],&quot;authorisation&quot;:true},{&quot;id&quot;:&quot;potentialExit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;filterBy&quot;:true,&quot;authorisation&quot;:false}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lender search-&gt; Select all Deals stage frrom drop down " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.buyers.investor.name&quot;,&quot;entity.buyers.investor.type.text&quot;,&quot;entity.buyers.investor.primaryAddress.country&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.basic.dealStatus&quot;,&quot;entity.pE.dealDetails.stage&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.basic.currency&quot;,&quot;entity.basic.dealSize.localMn&quot;,&quot;entity.basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;entity.basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealInvestor&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.pE.dealDetails.stage&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;entity.pE.dealDetails.stage&quot;,&quot;filterBy&quot;:[&quot;Angel&quot;,&quot;Seed&quot;,&quot;Series A/Round 1&quot;,&quot;Series B/Round 2&quot;,&quot;Series C/Round 3&quot;,&quot;Series D/Round 4&quot;,&quot;Series E/Round 5&quot;,&quot;Series F/Round 6&quot;,&quot;Series G/Round 7&quot;,&quot;Series H/Round 8&quot;,&quot;Series I/Round 9&quot;,&quot;Series J/Round 10&quot;,&quot;Series K/Round 11&quot;,&quot;Series L/Round 12&quot;,&quot;Growth Capital/Expansion&quot;,&quot;PIPE&quot;,&quot;Add-on&quot;,&quot;Merger&quot;,&quot;Pre-IPO&quot;,&quot;Grant&quot;,&quot;Venture Debt&quot;,&quot;Secondary Stock Purchase&quot;,&quot;Unspecified Round&quot;]}]},{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;VC&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lender search-&gt; Select Investor type from more filters" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.buyers.investor.name&quot;,&quot;entity.buyers.investor.type.text&quot;,&quot;entity.buyers.investor.primaryAddress.country&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.basic.dealStatus&quot;,&quot;entity.pE.dealDetails.stage&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.basic.currency&quot;,&quot;entity.basic.dealSize.localMn&quot;,&quot;entity.basic.dealSize.usdMn&quot;],&quot;sortBy&quot;:&quot;entity.basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealInvestor&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.buyers.investor.type.text&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;entity.buyers.investor.type.text&quot;,&quot;filterBy&quot;:[&quot;Private Equity Firm&quot;,&quot;Real Estate Firm&quot;,&quot;Infrastructure Firm (Investor)&quot;,&quot;Private Equity Firm (Investor)&quot;,&quot;Real Estate Firm (Investor)&quot;,&quot;Private Debt Firm&quot;,&quot;Hedge Fund Manager&quot;,&quot;Infrastructure Firm&quot;,&quot;Fund Manager&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;entity.buyers.investor.type.text&quot;,&quot;filterBy&quot;:[&quot;Asset Manager&quot;,&quot;Bank&quot;,&quot;Corporate Investor&quot;,&quot;Endowment Plan&quot;,&quot;Foundation&quot;,&quot;Private Equity Fund of Funds Manager&quot;,&quot;Secondary Fund of Funds Manager&quot;,&quot;Listed Fund of Funds Manager&quot;,&quot;Hybrid Fund of Funds Manager&quot;,&quot;Real Assets Fund of Funds Manager&quot;,&quot;Private Debt Fund of Funds Manager&quot;,&quot;Real Estate Fund of Funds Manager&quot;,&quot;Infrastructure Fund of Funds Manager&quot;,&quot;Secondary Real Estate&quot;,&quot;Fund of Hedge Funds Manager&quot;,&quot;Fund of Funds Manager&quot;,&quot;Government Agency&quot;,&quot;Insurance Company&quot;,&quot;Investment Bank&quot;,&quot;Investment Company&quot;,&quot;Investment Trust&quot;,&quot;Private Sector Pension Fund&quot;,&quot;Public Pension Fund&quot;,&quot;Sovereign Wealth Fund&quot;,&quot;Superannuation Scheme&quot;]},{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;entity.buyers.investor.type.text&quot;,&quot;filterBy&quot;:[&quot;Family Office - Single&quot;,&quot;Family Office - Multi&quot;,&quot;Wealth Manager&quot;]}]},{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;VC&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lender search-&gt; PD -&gt; Selecting capital structure from the drop down" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;columns&quot;:[&quot;entity.id&quot;,&quot;entity.pE.portfolioCompany.id&quot;,&quot;entity.debtFinancing.tranches.debtProviderFirms.id&quot;,&quot;entity.debtFinancing.tranches.debtProviderFirms.categories&quot;,&quot;entity.debtFinancing.tranches.debtProviderFirms.name&quot;,&quot;entity.pE.portfolioCompany.name&quot;,&quot;entity.basic.dealDate&quot;,&quot;entity.basic.dealStatus&quot;,&quot;entity.pE.dealDetails.investmentType&quot;,&quot;entity.buyers.investor.name&quot;,&quot;entity.pE.portfolioCompany.primaryIndustry.industry&quot;,&quot;entity.pE.portfolioCompany.subIndustries.text&quot;,&quot;entity.pE.portfolioCompany.verticals.text&quot;,&quot;entity.basic.currency&quot;,&quot;entity.basic.dealSize.localMn&quot;,&quot;entity.basic.dealSize.usdMn&quot;,&quot;entity.debtFinancing.debtSize.localMn&quot;,&quot;entity.debtFinancing.debtSize.usdMn&quot;],&quot;sortBy&quot;:&quot;entity.basic.dealDate&quot;,&quot;sortOrder&quot;:&quot;descending&quot;,&quot;page&quot;:1,&quot;category&quot;:&quot;DealDebtProvider&quot;,&quot;newFilters&quot;:[{&quot;id&quot;:&quot;entity.debtFinancing.tranches.capitalStructure&quot;,&quot;type&quot;:&quot;AGGREGATE&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[{&quot;type&quot;:&quot;LIST&quot;,&quot;id&quot;:&quot;entity.debtFinancing.tranches.capitalStructure&quot;,&quot;filterBy&quot;:[&quot;Senior Debt&quot;,&quot;Mezzanine&quot;,&quot;Junior/Subordinated&quot;,&quot;Unitranche&quot;,&quot;Unknown&quot;]}]},{&quot;id&quot;:&quot;entity.assetClasses&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;filterOperation&quot;:null,&quot;filterBy&quot;:[&quot;PD&quot;],&quot;authorisation&quot;:true}],&quot;size&quot;:${SIZE}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">Application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters">totalCount</stringProp>
                <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
