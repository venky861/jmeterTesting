<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Identity Grant Type" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="IDENTITY_URL" elementType="Argument">
            <stringProp name="Argument.name">IDENTITY_URL</stringProp>
            <stringProp name="Argument.value">identity-white.dev.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">search-orange.dev.pro.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERPREF_URL" elementType="Argument">
            <stringProp name="Argument.name">USERPREF_URL</stringProp>
            <stringProp name="Argument.value">userpreferences-orange.dev.pro.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROAPI_IDENTITY_URL" elementType="Argument">
            <stringProp name="Argument.name">PROAPI_IDENTITY_URL</stringProp>
            <stringProp name="Argument.value">orange.dev.api.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CURA_URL" elementType="Argument">
            <stringProp name="Argument.name">CURA_URL</stringProp>
            <stringProp name="Argument.value">contact-api-white.dev.cura.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FEEDS_URL" elementType="Argument">
            <stringProp name="Argument.name">FEEDS_URL</stringProp>
            <stringProp name="Argument.value">feeds-white.dev.preqin.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SIZE" elementType="Argument">
            <stringProp name="Argument.name">SIZE</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Data File" enabled="true">
        <stringProp name="filename">C:/Users/Venkatesh.Sekaran/Downloads/apache-jmeter-5.4.3/bin/Identity_Grant_Cred.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">USERNAME,PASSWORD,assetClass,strategy,APIKEY</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PRO" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="USERNAME" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${USERNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">USERNAME</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PASSWORD</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.client.secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Token</stringProp>
            <stringProp name="RegexExtractor.regex">{*access_token&quot;,&quot;([]^&quot;)+}&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Investor" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Investor Advance Search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;investorsFundCount&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;type&quot;,&#xd;
    &quot;overAllAssetsUnderManagement.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.peAllocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.peAllocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.reAllocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.reAllocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInHoldings.min.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInHoldings.max.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInFunds.min.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInFunds.max.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInHoldings.min.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInHoldings.max.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInFunds.min.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInFunds.max.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;assetsUnderManagement.usdMn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Investor&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;investmentPreferences&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;general&quot;,&#xd;
        &quot;current&quot;,&#xd;
        &quot;past&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Investor Advance Search with Asset Class Filter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;investorsFundCount&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;type&quot;,&#xd;
    &quot;overAllAssetsUnderManagement.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.peAllocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.peAllocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.reAllocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.reAllocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInHoldings.min.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInHoldings.max.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInFunds.min.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInFunds.max.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInHoldings.min.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInHoldings.max.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInFunds.min.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInFunds.max.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;assetsUnderManagement.usdMn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Investor&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;investmentPreferences&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;general&quot;,&#xd;
        &quot;current&quot;,&#xd;
        &quot;past&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;investorAssetClass&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Investor Fund Search and Mandates" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;investorsFundCount&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;type&quot;,&#xd;
    &quot;overAllAssetsUnderManagement.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.peAllocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.peAllocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.pE.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.reAllocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.reAllocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.rE.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.pD.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInHoldings.min.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInHoldings.max.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInFunds.min.usdMn&quot;,&#xd;
    &quot;investorDetails.iNF.investmentPreferences.typicalInvetmentSizeInFunds.max.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInHoldings.min.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInHoldings.max.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInFunds.min.usdMn&quot;,&#xd;
    &quot;investorDetails.nR.investmentPreferences.typicallyInvestInFunds.max.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.allocations.current.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.allocations.target.amount.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.investmentPreferences.typicalInvestmentSize.min.usdMn&quot;,&#xd;
    &quot;investorDetails.hF.investmentPreferences.typicalInvestmentSize.max.usdMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;investorDetails.pE.peAllocations.current.amount.usdMn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Investor&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;investmentPreferences&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;mandates&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor - ApiKey" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${USERNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="apikey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${APIKEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">apikey</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PROAPI_IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken-Apikey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">refresh_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.refresh_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Fund Manager" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager Advance Search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.pE.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.rE.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.pD.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.nR.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.iNF.primaryStrategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.hF.category&quot;,&#xd;
    &quot;fundManagerDetails.funds&quot;,&#xd;
    &quot;fundManagerDetails.hF.coreStrategies&quot;,&#xd;
    &quot;hFAssetsUnderManagement.localMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager Advance Search with Asset Class Filter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.pE.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.rE.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.pD.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.nR.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.iNF.primaryStrategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.hF.category&quot;,&#xd;
    &quot;fundManagerDetails.funds&quot;,&#xd;
    &quot;fundManagerDetails.hF.coreStrategies&quot;,&#xd;
    &quot;hFAssetsUnderManagement.localMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundmanagerassetclass&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager By deal Activity" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.matchingDeals&quot;,&#xd;
    &quot;fundManagerDetails.totalDeals&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealValues&quot;,&#xd;
    &quot;fundManagerDetails.totalDealValues&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundManagerDealsCount&quot;,&#xd;
      &quot;type&quot;: &quot;integer&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager By deal Activity with Number of Matching Deals " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.matchingDeals&quot;,&#xd;
    &quot;fundManagerDetails.totalDeals&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealValues&quot;,&#xd;
    &quot;fundManagerDetails.totalDealValues&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundManagerDetails.matchingDeals&quot;,&#xd;
      &quot;type&quot;: &quot;NUMERICRANGE&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 10000&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundManagerDealsCount&quot;,&#xd;
      &quot;type&quot;: &quot;integer&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RefreshToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">refresh_token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">openid preqin.com.default dataApi.v1.default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="refresh_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${refresh_token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">refresh_token</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken-Refresh</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Funds" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Advance Search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.fundSize.usdMn&quot;,&#xd;
    &quot;fundRaising.finalClose.date&quot;,&#xd;
    &quot;fundRaising.finalClose.size.usdMn&quot;,&#xd;
    &quot;basic.fundManager.name&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.country&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.region&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.line&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Advance Search with Asset Class Filter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.fundSize.usdMn&quot;,&#xd;
    &quot;fundRaising.finalClose.date&quot;,&#xd;
    &quot;fundRaising.finalClose.size.usdMn&quot;,&#xd;
    &quot;basic.fundManager.name&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.country&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.region&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.line&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;basic.assetClasses&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Recently Added Funds With Default Filters" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;basic.universe&quot;,&#xd;
    &quot;createdOn&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;fundRaising.fundSize.localMn&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;createdOn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;basic.assetClasses&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;PE&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundTypeAndStatus&quot;,&#xd;
      &quot;type&quot;: &quot;AGGREGATE&quot;,&#xd;
      &quot;filterOperation&quot;: &quot;and&quot;,&#xd;
      &quot;filterBy&quot;: [&#xd;
        {&#xd;
          &quot;type&quot;: &quot;LIST&quot;,&#xd;
          &quot;id&quot;: &quot;fundRaising.status&quot;,&#xd;
          &quot;filterBy&quot;: [&#xd;
            &quot;Raising&quot;,&#xd;
            &quot;First Close&quot;,&#xd;
            &quot;Second Close&quot;,&#xd;
            &quot;Third Close &quot;,&#xd;
            &quot;Fourth Close&quot;,&#xd;
            &quot;Fifth Close&quot;,&#xd;
            &quot;Sixth Close&quot;,&#xd;
            &quot;Listed&quot;,&#xd;
            &quot;Open Ended&quot;,&#xd;
            &quot;Evergreen&quot;,&#xd;
            &quot;REIT&quot;,&#xd;
            &quot;Semi Open Ended&quot;,&#xd;
            &quot;Active&quot;,&#xd;
            &quot;Open to Investment/Raising&quot;&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Recently Added Funds With Only Asset class Filter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;basic.universe&quot;,&#xd;
    &quot;createdOn&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;fundRaising.fundSize.localMn&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;createdOn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;basic.assetClasses&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CURA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="USERNAME" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${USERNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">USERNAME</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PASSWORD</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">cura.preqin.com.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">openid preqin.maintenance.userdetails preqin.cluster.api</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Token</stringProp>
            <stringProp name="RegexExtractor.regex">{*access_token&quot;,&quot;([]^&quot;)+}&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Advance Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${CURA_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/organizations/99355/individuals?PageNumber=1&amp;PageSize=20&amp;sortBy=lastName&amp;sortOrder=asc&amp;employedStatus=true&amp;individualStatus=true</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.totalCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor - ApiKey" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${USERNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="apikey" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${APIKEY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">apikey</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PROAPI_IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken-Apikey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">refresh_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.refresh_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Fund Manager" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager Advance Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.pE.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.rE.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.pD.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.nR.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.iNF.primaryStrategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.hF.category&quot;,&#xd;
    &quot;fundManagerDetails.funds&quot;,&#xd;
    &quot;fundManagerDetails.hF.coreStrategies&quot;,&#xd;
    &quot;hFAssetsUnderManagement.localMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager Advance Search with Asset Class Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.city&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.pE.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.rE.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.RE.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.pD.overallInvestmentCriteria.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.PD.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.nR.preferences.strategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.NR.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.iNF.primaryStrategies&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.totalCapitalRaised.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.snapshots.INF.estimatedDryPowder.usdMn&quot;,&#xd;
    &quot;fundManagerDetails.hF.category&quot;,&#xd;
    &quot;fundManagerDetails.funds&quot;,&#xd;
    &quot;fundManagerDetails.hF.coreStrategies&quot;,&#xd;
    &quot;hFAssetsUnderManagement.localMn&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundmanagerassetclass&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager By deal Activity" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.matchingDeals&quot;,&#xd;
    &quot;fundManagerDetails.totalDeals&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealValues&quot;,&#xd;
    &quot;fundManagerDetails.totalDealValues&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundManagerDealsCount&quot;,&#xd;
      &quot;type&quot;: &quot;integer&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Manager By deal Activity with Number of Matching Deals " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;addressDetails.country&quot;,&#xd;
    &quot;fundManagerDetails.matchingDeals&quot;,&#xd;
    &quot;fundManagerDetails.totalDeals&quot;,&#xd;
    &quot;fundManagerDetails.matchingDealValues&quot;,&#xd;
    &quot;fundManagerDetails.totalDealValues&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;fundManagerDetails.matchingDealsPercentage&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;FundManager&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundManagerDetails.matchingDeals&quot;,&#xd;
      &quot;type&quot;: &quot;NUMERICRANGE&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 10000&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundManagerDealsCount&quot;,&#xd;
      &quot;type&quot;: &quot;integer&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Apikey}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RefreshToken" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">refresh_token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">openid preqin.com.default dataApi.v1.default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.client</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="refresh_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${refresh_token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">refresh_token</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken-Refresh</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Funds" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Advance Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.fundSize.usdMn&quot;,&#xd;
    &quot;fundRaising.finalClose.date&quot;,&#xd;
    &quot;fundRaising.finalClose.size.usdMn&quot;,&#xd;
    &quot;basic.fundManager.name&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.country&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.region&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.line&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Advance Search with Asset Class Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.fundSize.usdMn&quot;,&#xd;
    &quot;fundRaising.finalClose.date&quot;,&#xd;
    &quot;fundRaising.finalClose.size.usdMn&quot;,&#xd;
    &quot;basic.fundManager.name&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.country&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.region&quot;,&#xd;
    &quot;basic.fundManager.headquarterAddress.line&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;name&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;ascending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;basic.assetClasses&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Recently Added Funds With Default Filters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;basic.universe&quot;,&#xd;
    &quot;createdOn&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;fundRaising.fundSize.localMn&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;createdOn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;basic.assetClasses&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;PE&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;fundTypeAndStatus&quot;,&#xd;
      &quot;type&quot;: &quot;AGGREGATE&quot;,&#xd;
      &quot;filterOperation&quot;: &quot;and&quot;,&#xd;
      &quot;filterBy&quot;: [&#xd;
        {&#xd;
          &quot;type&quot;: &quot;LIST&quot;,&#xd;
          &quot;id&quot;: &quot;fundRaising.status&quot;,&#xd;
          &quot;filterBy&quot;: [&#xd;
            &quot;Raising&quot;,&#xd;
            &quot;First Close&quot;,&#xd;
            &quot;Second Close&quot;,&#xd;
            &quot;Third Close &quot;,&#xd;
            &quot;Fourth Close&quot;,&#xd;
            &quot;Fifth Close&quot;,&#xd;
            &quot;Sixth Close&quot;,&#xd;
            &quot;Listed&quot;,&#xd;
            &quot;Open Ended&quot;,&#xd;
            &quot;Evergreen&quot;,&#xd;
            &quot;REIT&quot;,&#xd;
            &quot;Semi Open Ended&quot;,&#xd;
            &quot;Active&quot;,&#xd;
            &quot;Open to Investment/Raising&quot;&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fund Recently Added Funds With Only Asset class Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;columns&quot;: [&#xd;
    &quot;id&quot;,&#xd;
    &quot;basic.fundManager.id&quot;,&#xd;
    &quot;checkBox&quot;,&#xd;
    &quot;name&quot;,&#xd;
    &quot;privateCapital.vintage&quot;,&#xd;
    &quot;basic.universe&quot;,&#xd;
    &quot;createdOn&quot;,&#xd;
    &quot;basic.strategy&quot;,&#xd;
    &quot;geographicFocus.coreLocationsHf&quot;,&#xd;
    &quot;fundRaising.status&quot;,&#xd;
    &quot;fundRaising.fundSize.localMn&quot;,&#xd;
    &quot;structure.structureType&quot;,&#xd;
    &quot;structure.domicile&quot;,&#xd;
    &quot;industryFocus.coreIndustries&quot;,&#xd;
    &quot;industryFocus.verticals&quot;&#xd;
  ],&#xd;
  &quot;sortBy&quot;: &quot;createdOn&quot;,&#xd;
  &quot;sortOrder&quot;: &quot;descending&quot;,&#xd;
  &quot;page&quot;: 1,&#xd;
  &quot;category&quot;: &quot;Fund&quot;,&#xd;
  &quot;newFilters&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: &quot;basic.assetClasses&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;${assetClass}&quot;&#xd;
      ],&#xd;
      &quot;authorisation&quot;: true&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: &quot;officeType&quot;,&#xd;
      &quot;type&quot;: &quot;LIST&quot;,&#xd;
      &quot;filterOperation&quot;: null,&#xd;
      &quot;filterBy&quot;: [&#xd;
        &quot;head_office&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;size&quot;: ${SIZE}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search-api/search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken-Refresh}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">Application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">totalCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.total</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">totalCount</stringProp>
              <stringProp name="script">
String var1 = vars.get(&quot;totalCount&quot;);
Integer totalCount = Integer.valueOf(var1);
if (totalCount &lt; 1){
   
	assertionResult.setError(true);
	log.info(&quot;Total values are less then 1&quot;);
	assertionResult.setResponseMessage(&quot;Total values are less then 1&quot;);
	}

log.info(&quot;Total number of rows are greater than one &quot;);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Feeds" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(forever)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token/Extractor" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="USERNAME" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${USERNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">USERNAME</stringProp>
              </elementProp>
              <elementProp name="PASSWORD" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">PASSWORD</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.client.feeds</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.com.feeds.client.secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">preqin.feeds.api.v1.default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${IDENTITY_URL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">BearerToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Token</stringProp>
            <stringProp name="RegexExtractor.regex">{*access_token&quot;,&quot;([]^&quot;)+}&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
            <intProp name="groupSize">4</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Investor_feeds" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Investor Feeds Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${FEEDS_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/investor/pe</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/csv</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Investor_feeds_contact" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Investor Feeds Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${FEEDS_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/investor/contact/pe</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/csv</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Investor_feeds_committment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Investor Feeds Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${FEEDS_URL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/investor/commitment/pe</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${BearerToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">Application/json:charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/csv</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
